)  1.72 KB
#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

int main() {
    struct Process processes[MAX_PROCESSES];
    int num_processes;

    printf("Enter number of processes: ");
    scanf("%d", &num_processes);

    printf("Enter burst times for each process:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("P%d: ", i+1);
        scanf("%d", &processes[i].burst_time);
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
    }

    for (int i = 0; i < num_processes - 1; i++) {
        for (int j = i + 1; j < num_processes; j++) {
            if (processes[i].burst_time > processes[j].burst_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    int current_time = 0;
    for (int i = 0; i < num_processes; i++) {
        processes[i].waiting_time = current_time;
        total_waiting_time += processes[i].waiting_time;
        current_time += processes[i].burst_time;
        processes[i].turnaround_time = current_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < num_processes; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", i+1, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average waiting time: %.2f\n", (float)total_waiting_time / num_processes);
    printf("Average turnaround time: %.2f\n", (float)total_turnaround_time / num_processes);

    return 0;
}
