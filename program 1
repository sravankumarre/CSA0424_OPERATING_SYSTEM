1)#include <stdio.h>
#include <stdbool.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int claim[NUM_PROCESSES][NUM_RESOURCES] = {
    {3, 2, 2},
    {6, 1, 3},
    {3, 1, 4},
    {4, 2, 2}
};

int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
    {1, 0, 0},
    {6, 1, 2},
    {2, 1, 1},
    {0, 0, 2}
};

int available[NUM_RESOURCES] = {9, 3, 6};

bool finished[NUM_PROCESSES];
int current_available[NUM_RESOURCES];

void print_state() {
    printf("Current state:\n");
    printf("Claim matrix:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            printf("%d ", claim[i][j]);
        }
        printf("\n");
    }
    printf("Allocation matrix:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }
    printf("Available resources: ");
    for (int i = 0; i < NUM_RESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n\n");
}

bool is_safe_state() {
    for (int i = 0; i < NUM_RESOURCES; i++) {
        current_available[i] = available[i];
    }

    for (int i = 0; i < NUM_PROCESSES; i++) {
        finished[i] = false;
    }

    bool found_safe_process;
    do {
        found_safe_process = false;

        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (!finished[i]) {
                bool can_run = true;
                for (int j = 0; j < NUM_RESOURCES; j++) {
                    if (claim[i][j] - allocation[i][j] > current_available[j]) {
                        can_run = false;
                        break;
                    }
                }
                if (can_run) {
                    found_safe_process = true;
                    finished[i] = true;
                    for (int j = 0; j < NUM_RESOURCES; j++) {
                        current_available[j] += allocation[i][j];
                    }
                    break;
                }
            }
        }
    } while (found_safe_process);

    for (int i = 0; i < NUM_PROCESSES; i++) {
        if (!finished[i]) {
            return false;
        }
    }
    return true;
}

int main() {
    print_state();
    if (is_safe_state()) {
        printf("System is in a safe state.\n");
    } else {
        printf("System is in an unsafe state.\n");
    }
    return 0;
}
